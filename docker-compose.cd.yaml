services:
  postgres:
    container_name: postgres
    image: postgres
    env_file: ./.env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=outposts
      - POSTGRES_DB=postgres
    restart: always
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/init.sh:/docker-entrypoint-initdb.d/init.sh
    ports:
      - 9005:5432
    networks:
      - outposts
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}']
      interval: 5s
      timeout: 5s
      retries: 10

  logto:
    container_name: logto
    depends_on:
      postgres:
        condition: service_healthy
    image: svhd/logto:latest
    entrypoint: ['sh', '-c', 'npm run cli db alteration deploy latest && npm run cli db seed -- --swe && npm start']
    ports:
      - 9001:3001
      - 9002:3002
    env_file: ./.env
    environment:
      - TRUST_PROXY_HEADER=1
      - DB_URL=${LOGTO_DATABASE_URL}
      - ENDPOINT=${AUTH_ENDPOINT}
      - ADMIN_ENDPOINT=${AUTH_DASHBOARD_ENDPOINT}
    networks:
      - outposts

  confluence:
    container_name: confluence
    image: 'ghcr.io/outposts-project/confluence:latest'
    env_file: ./.env
    restart: always
    ports:
      - 9003:4001
    networks:
      - outposts
    depends_on:
      - postgres
      - logto

  outposts-web:
    container_name: outposts-web
    image: 'ghcr.io/outposts-project/outposts-web:latest'
    env_file: ./.env
    restart: always
    ports:
      - 9004:80
    networks:
      - outposts
    depends_on:
      - confluence
      - logto

networks:
  outposts:
    name: outposts
    driver: bridge
